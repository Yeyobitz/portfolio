<canvas id="particleCanvas" class="particle-canvas desktop-only"></canvas>
<div class="mobile-background mobile-only"></div>

<style>
  .particle-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 2;
    opacity: 0.8;
    mix-blend-mode: screen;
    background: transparent;
    overflow: hidden;
    transform: translateZ(0);
    will-change: transform;
  }

  .mobile-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 2;
    background: radial-gradient(circle at 50% 50%,
      rgba(0, 255, 65, 0.1) 0%,
      rgba(65, 105, 255, 0.1) 50%,
      rgba(255, 0, 255, 0.1) 100%
    );
  }

  .desktop-only {
    display: none;
  }

  .mobile-only {
    display: block;
  }

  @media (min-width: 769px) {
    .desktop-only {
      display: block;
    }

    .mobile-only {
      display: none;
    }
  }
</style>

<script>
class Particle {
  constructor(x, y, canvas) {
    this.x = x;
    this.y = y;
    this.canvas = canvas;
    this.size = Math.random() * 2 + 1;
    this.baseSize = this.size;
    this.speedX = Math.random() * 0.8 - 0.4;
    this.speedY = Math.random() * 0.8 - 0.4;
    this.color = this.getRandomColor();
    this.alpha = Math.random() * 0.4 + 0.2;
    this.baseAlpha = this.alpha;
    this.friction = 0.98;
    this.gravity = 0.015;
    this.pulseSpeed = 0.05 + Math.random() * 0.05;
    this.pulseOffset = Math.random() * Math.PI * 2;
    this.collisionCooldown = 0;
  }

  getRandomColor() {
    const colors = [
      'rgb(0, 255, 65)',   // Verde neón
      'rgb(65, 105, 255)', // Azul neón
      'rgb(255, 0, 255)'   // Morado neón
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  update(mouseX, mouseY, time, particles) {
    if (this.collisionCooldown > 0) {
      this.collisionCooldown--;
    }

    this.x += this.speedX;
    this.y += this.speedY;

    this.speedX *= this.friction;
    this.speedY *= this.friction;
    
    const pulse = Math.sin(time * this.pulseSpeed + this.pulseOffset);
    this.size = this.baseSize + pulse * 0.5;
    this.alpha = this.baseAlpha + pulse * 0.1;
    
    if (mouseX && mouseY) {
      const dx = mouseX - this.x;
      const dy = mouseY - this.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const influence = Math.max(0, 1 - distance / 500);
      
      if (distance < 500) {
        this.speedX += (dx / distance) * this.gravity * influence * 1.5;
        this.speedY += (dy / distance) * this.gravity * influence * 1.5;
        
        this.size = this.baseSize + (influence * 3);
        this.alpha = this.baseAlpha + (influence * 0.4);
      }
    }

    if (this.collisionCooldown === 0) {
      for (let particle of particles) {
        if (particle === this) continue;
        
        const dx = particle.x - this.x;
        const dy = particle.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < (this.size + particle.size)) {
          this.shouldDestroy = true;
          particle.shouldDestroy = true;
          
          this.size *= 1.5;
          this.alpha *= 1.5;
          particle.size *= 1.5;
          particle.alpha *= 1.5;
          
          this.collisionCooldown = 5;
          particle.collisionCooldown = 5;
          break;
        }
      }
    }

    const margin = 50;
    const bounce = 0.7;

    if (this.x < margin) {
      this.speedX += (margin - this.x) * 0.02;
    } else if (this.x > window.innerWidth - margin) {
      this.speedX -= (this.x - (window.innerWidth - margin)) * 0.02;
    }

    if (this.y < margin) {
      this.speedY += (margin - this.y) * 0.02;
    } else if (this.y > window.innerHeight - margin) {
      this.speedY -= (this.y - (window.innerHeight - margin)) * 0.02;
    }

    const maxSpeed = 3;
    const currentSpeed = Math.sqrt(this.speedX * this.speedX + this.speedY * this.speedY);
    if (currentSpeed > maxSpeed) {
      this.speedX = (this.speedX / currentSpeed) * maxSpeed;
      this.speedY = (this.speedY / currentSpeed) * maxSpeed;
    }
  }

  draw(ctx) {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fillStyle = this.color;
    ctx.globalAlpha = this.alpha;
    ctx.fill();
    
    ctx.shadowBlur = this.size * 5;
    ctx.shadowColor = this.color;
  }
}

class ExplosionEffect {
  constructor(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.particles = [];
    this.lifetime = 20;
    this.createParticles();
  }

  createParticles() {
    const numParticles = 8;
    for (let i = 0; i < numParticles; i++) {
      const angle = (i / numParticles) * Math.PI * 2;
      const speed = Math.random() * 2 + 1;
      this.particles.push({
        x: this.x,
        y: this.y,
        vx: Math.cos(angle) * speed,
        vy: Math.sin(angle) * speed,
        size: Math.random() * 2 + 1,
        alpha: 1
      });
    }
  }

  update() {
    this.lifetime--;
    this.particles.forEach(p => {
      p.x += p.vx;
      p.y += p.vy;
      p.alpha *= 0.9;
      p.size *= 0.95;
    });
  }

  draw(ctx) {
    this.particles.forEach(p => {
      ctx.beginPath();
      ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
      ctx.fillStyle = this.color;
      ctx.globalAlpha = p.alpha * 0.5;
      ctx.fill();
      
      ctx.shadowBlur = p.size * 3;
      ctx.shadowColor = this.color;
    });
  }

  isDead() {
    return this.lifetime <= 0;
  }
}

class ParticleSystem {
  constructor() {
    this.canvas = document.getElementById('particleCanvas');
    if (!this.canvas) {
      console.error('Canvas not found');
      return;
    }
    
    this.ctx = this.canvas.getContext('2d', {
      alpha: true,
      willReadFrequently: true
    });
    
    if (!this.ctx) {
      console.error('Could not get canvas context');
      return;
    }

    this.particles = [];
    this.mouseX = undefined;
    this.mouseY = undefined;
    this.lastTime = 0;
    this.explosions = [];
    this.init();
    console.log('ParticleSystem initialized');
  }

  init() {
    this.resize();
    window.addEventListener('resize', () => this.resize());

    document.addEventListener('mousemove', (e) => {
      this.mouseX = e.clientX;
      this.mouseY = e.clientY;
    });

    this.createParticles();

    requestAnimationFrame((timestamp) => this.animate(timestamp));
  }

  resize() {
    const dpr = window.devicePixelRatio || 1;
    
    this.canvas.width = window.innerWidth * dpr;
    this.canvas.height = window.innerHeight * dpr;
    
    this.canvas.style.width = `${window.innerWidth}px`;
    this.canvas.style.height = `${window.innerHeight}px`;
    
    this.ctx.scale(dpr, dpr);
    
    if (this.particles.length > 0) {
      const scaleX = window.innerWidth / this.prevWidth;
      const scaleY = window.innerHeight / this.prevHeight;
      
      this.particles.forEach(particle => {
        particle.x *= scaleX;
        particle.y *= scaleY;
      });
    } else {
      this.createParticles();
    }
    
    this.prevWidth = window.innerWidth;
    this.prevHeight = window.innerHeight;
  }

  createParticles() {
    const density = 12000;
    const numberOfParticles = Math.min(window.innerWidth * window.innerHeight / density, 250);
    
    for (let i = 0; i < numberOfParticles; i++) {
      const x = Math.random() * window.innerWidth;
      const y = Math.random() * window.innerHeight;
      this.particles.push(new Particle(x, y, this.canvas));
    }
  }

  animate(timestamp) {
    const deltaTime = timestamp - this.lastTime;
    this.lastTime = timestamp;

    if (deltaTime < 160) {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.explosions = this.explosions.filter(explosion => {
        explosion.update();
        explosion.draw(this.ctx);
        return !explosion.isDead();
      });
      
      this.particles.forEach(particle => {
        particle.update(this.mouseX, this.mouseY, timestamp * 0.001, this.particles);
        particle.draw(this.ctx);
      });

      const collidedParticles = this.particles.filter(p => p.shouldDestroy);
      collidedParticles.forEach(p => {
        this.explosions.push(new ExplosionEffect(p.x, p.y, p.color));
      });

      const destroyedCount = collidedParticles.length;
      this.particles = this.particles.filter(p => !p.shouldDestroy);

      for (let i = 0; i < destroyedCount; i++) {
        this.particles.push(this.createParticle());
      }
    }

    requestAnimationFrame((timestamp) => this.animate(timestamp));
  }

  createParticle() {
    const x = Math.random() * window.innerWidth;
    const y = Math.random() * window.innerHeight;
    return new Particle(x, y, this.canvas);
  }
}

let initAttempts = 0;
const MAX_ATTEMPTS = 10;

function initParticleSystem() {
  console.log('Attempting to initialize ParticleSystem');
  if (window.innerWidth > 768) {
    const canvas = document.getElementById('particleCanvas');
    if (canvas) {
      console.log('Canvas found, initializing ParticleSystem');
      new ParticleSystem();
    } else {
      initAttempts++;
      if (initAttempts < MAX_ATTEMPTS) {
        console.log(`Canvas not found, attempt ${initAttempts}/${MAX_ATTEMPTS}`);
        setTimeout(initParticleSystem, 100);
      } else {
        console.error('Failed to initialize ParticleSystem after maximum attempts');
      }
    }
  }
}

let hasInitialized = false;

function tryInit() {
  if (!hasInitialized) {
    hasInitialized = true;
    initParticleSystem();
  }
}

document.addEventListener('DOMContentLoaded', tryInit);
window.addEventListener('load', tryInit);

if (document.readyState === 'complete' || document.readyState === 'interactive') {
  tryInit();
}
</script> 