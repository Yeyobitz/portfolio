<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <div class="icon-container">
    <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"/>
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>
    <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
  </div>
</button>

<style>
  .theme-toggle {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: 50%;
    transition: all 0.3s ease;
    position: relative;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-toggle::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 50%;
    border: 1px solid var(--color-accent-blue);
    opacity: 0;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover::after {
    opacity: 1;
    transform: scale(1.1);
  }

  .icon-container {
    position: relative;
    width: 20px;
    height: 20px;
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
  }

  .sun-icon {
    color: var(--color-accent-blue);
    opacity: 0;
    transform: translate(-50%, -50%) rotate(90deg) scale(0);
  }

  .moon-icon {
    color: var(--color-accent-purple);
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  :global([data-theme="light"]) .sun-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0) scale(1);
  }

  :global([data-theme="light"]) .moon-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(-90deg) scale(0);
  }

  .theme-toggle:hover .sun-icon,
  .theme-toggle:hover .moon-icon {
    filter: drop-shadow(0 0 2px currentColor);
  }

  @media (max-width: 768px) {
    .theme-toggle {
      width: 36px;
      height: 36px;
    }

    .icon-container {
      width: 18px;
      height: 18px;
    }
  }
</style>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
  
  // Función para establecer el tema
  function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  }

  // Inicializar tema
  function initTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      setTheme(prefersDark.matches ? 'dark' : 'light');
    }
  }

  // Manejar clic en el botón
  themeToggle?.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
  });

  // Manejar cambios en las preferencias del sistema
  prefersDark.addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });

  // Inicializar cuando la página carga
  document.addEventListener('DOMContentLoaded', initTheme);
  document.addEventListener('astro:page-load', initTheme);
</script> 