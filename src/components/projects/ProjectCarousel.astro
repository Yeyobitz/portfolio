---
interface Props {
  projectName: string;
}

const { projectName } = Astro.props;

function getProjectImages(name: string): string[] {
  const projectName = name.toLowerCase();
  if (projectName === 'super tik-tak-toe') {
    return [
      '/projects/tictactoe/tictactoe1.webp',
      '/projects/tictactoe/tictactoe2.webp',
      '/projects/tictactoe/tictactoe3.webp'
    ];
  }
  if (projectName === 'tregua project') {
    return [
      '/projects/tregua/tregua1.webp',
      '/projects/tregua/tregua2.webp',
      '/projects/tregua/tregua3.webp'
    ];
  }
  if (projectName.toLowerCase() === 'plataformero generico n° 18001') {
    return [
      '/projects/PlataforGener/plataforgener1.webp',
      '/projects/PlataforGener/plataforgener2.webp',
      '/projects/PlataforGener/plataforgener3.webp'
    ];
  }
  if (projectName.toLowerCase() === 'pochita vet-app') {
    return [
      '/projects/pochita/pochita1.webp',
      '/projects/pochita/pochita2.webp',
      '/projects/pochita/pochita3.webp'
    ];
  }
  return [];
}

const images = getProjectImages(projectName);
---

<div class="carousel">
  <div class="slides">
    {images.map((img, index) => (
      <div class={`slide ${index === 0 ? 'active' : ''}`} data-index={index}>
        <img src={img} alt={`${projectName} screenshot ${index + 1}`} />
      </div>
    ))}
  </div>
  
  {images.length > 1 && (
    <div class="navigation">
      <button class="prev" type="button">←</button>
      <button class="next" type="button">→</button>
    </div>
  )}
</div>

<style>
  .carousel {
    width: 100%;
    aspect-ratio: 16/9;
    border-radius: 8px;
    overflow: hidden;
    background: var(--color-bg-secondary);
    position: relative;
  }

  .carousel::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, 0.15) 0px,
      rgba(0, 0, 0, 0.15) 1px,
      transparent 1px,
      transparent 2px
    );
    pointer-events: none;
    z-index: 2;
  }

  .carousel::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      rgba(255, 0, 0, 0.1),
      rgba(0, 255, 0, 0.1),
      rgba(0, 0, 255, 0.1)
    );
    mix-blend-mode: screen;
    pointer-events: none;
    z-index: 1;
  }

  .slides {
    width: 100%;
    height: 100%;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    visibility: hidden;
    transform: scale(1.1);
    transition: visibility 0s 0.5s;
  }

  .slide.active {
    visibility: visible;
    transform: scale(1);
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .slide.glitch {
    animation: glitch 0.4s cubic-bezier(0.23, 1, 0.32, 1) both;
  }

  .slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .navigation {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 1rem;
    z-index: 3;
  }

  button {
    background: rgba(0, 0, 0, 0.5);
    border: 2px solid var(--color-accent-green);
    color: var(--color-accent-green);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    text-shadow: 0 0 8px var(--color-accent-green);
    box-shadow: 0 0 10px rgba(0, 255, 65, 0.3);
  }

  button:hover {
    background: var(--color-accent-green);
    color: black;
    transform: scale(1.1);
    box-shadow: 
      0 0 20px rgba(0, 255, 65, 0.5),
      0 0 40px rgba(0, 255, 65, 0.3);
  }

  @keyframes glitch {
    0% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
      transform: translate(0) scale(1);
      filter: brightness(1);
    }
    10% {
      clip-path: polygon(10% 0, 90% 0, 90% 100%, 10% 100%);
      transform: translate(-2%, 2%) scale(1.02);
      filter: brightness(1.2);
    }
    20% {
      clip-path: polygon(5% 0, 95% 0, 95% 100%, 5% 100%);
      transform: translate(2%, -2%) scale(0.98);
      filter: brightness(0.8);
    }
    30% {
      clip-path: polygon(0 10%, 100% 10%, 100% 90%, 0 90%);
      transform: translate(-2%, -2%) scale(1.02);
      filter: brightness(1.1);
    }
    40% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
      transform: translate(0) scale(1);
      filter: brightness(1);
    }
    45% {
      clip-path: polygon(0 85%, 100% 85%, 100% 95%, 0 95%);
      transform: translate(2%, 2%) scale(1.1);
      filter: brightness(1.3);
    }
    50% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
      transform: translate(0) scale(1);
      filter: brightness(1);
    }
  }
</style>

<script>
  function initCarousel() {
    document.querySelectorAll('.carousel').forEach(carousel => {
      const slides = [...carousel.querySelectorAll('.slide')];
      const prevBtn = carousel.querySelector('.prev');
      const nextBtn = carousel.querySelector('.next');
      let currentIndex = 0;
      let isTransitioning = false;

      if (slides.length <= 1) return;

      function showSlide(index: number) {
        if (isTransitioning) return;
        isTransitioning = true;

        // Remover clases active y glitch de todos los slides
        slides.forEach(slide => {
          slide.classList.remove('active', 'glitch');
        });

        // Agregar efecto glitch al slide actual y al siguiente
        slides[currentIndex].classList.add('glitch');
        slides[index].classList.add('glitch');

        // Después del glitch, mostrar el nuevo slide
        setTimeout(() => {
          slides[currentIndex].classList.remove('active', 'glitch');
          slides[index].classList.add('active');
          slides[index].classList.remove('glitch');
          currentIndex = index;
          isTransitioning = false;
        }, 400);

        // Efecto de scanlines más intenso durante la transición
        const carouselElement = carousel as HTMLElement;
        carouselElement.style.setProperty('--scan-intensity', '0.3');
        setTimeout(() => {
          carouselElement.style.setProperty('--scan-intensity', '0.15');
        }, 400);
      }

      prevBtn?.addEventListener('click', () => {
        const newIndex = (currentIndex - 1 + slides.length) % slides.length;
        showSlide(newIndex);
      });

      nextBtn?.addEventListener('click', () => {
        const newIndex = (currentIndex + 1) % slides.length;
        showSlide(newIndex);
      });

      // Agregar efecto de ruido estático al hover
      carousel.addEventListener('mouseenter', () => {
        carousel.classList.add('noise');
      });

      carousel.addEventListener('mouseleave', () => {
        carousel.classList.remove('noise');
      });
    });
  }

  // Inicializar cuando la página carga
  document.addEventListener('DOMContentLoaded', initCarousel);
  document.addEventListener('astro:page-load', initCarousel);
</script>