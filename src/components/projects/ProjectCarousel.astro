---
interface Props {
  images: string[];
  projectName: string;
}

const { images, projectName } = Astro.props;

// Placeholder images for development
const placeholderImages = [
  '/projects/placeholder-1.png',
  '/projects/placeholder-2.png',
  '/projects/placeholder-3.png'
];

const displayImages = images.length > 0 ? images : placeholderImages;
---

<div class="carousel-container crt">
  <div class="carousel">
    {displayImages.map((image, index) => (
      <div class="carousel-slide" data-index={index}>
        <img src={image} alt={`${projectName} screenshot ${index + 1}`} />
      </div>
    ))}
  </div>
  <div class="carousel-controls">
    <button class="carousel-button prev" aria-label="Previous image">◀</button>
    <div class="carousel-indicators">
      {displayImages.map((_, index) => (
        <button 
          class="indicator" 
          data-index={index} 
          aria-label={`Go to slide ${index + 1}`}
        ></button>
      ))}
    </div>
    <button class="carousel-button next" aria-label="Next image">▶</button>
  </div>
</div>

<script>
  class Carousel {
    constructor(element: Element) {
      const slides = element.querySelectorAll('.carousel-slide');
      const indicators = element.querySelectorAll('.indicator');
      const prevButton = element.querySelector('.prev');
      const nextButton = element.querySelector('.next');
      let currentSlide = 0;

      const showSlide = (index: number) => {
        slides.forEach((slide: Element) => {
          (slide as HTMLElement).style.transform = `translateX(-${index * 100}%)`;
        });
        indicators.forEach((indicator, i) => {
          indicator.classList.toggle('active', i === index);
        });
      };

      const nextSlide = () => {
        currentSlide = (currentSlide + 1) % slides.length;
        showSlide(currentSlide);
      };

      const prevSlide = () => {
        currentSlide = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(currentSlide);
      };

      prevButton?.addEventListener('click', prevSlide);
      nextButton?.addEventListener('click', nextSlide);
      
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          currentSlide = index;
          showSlide(currentSlide);
        });
      });

      // Initialize
      showSlide(0);
    }
  }

  // Initialize all carousels on the page
  document.querySelectorAll('.carousel-container').forEach(carousel => {
    new Carousel(carousel);
  });
</script>

<style>
  .carousel-container {
    position: relative;
    width: 100%;
    margin: 1rem 0;
    overflow: hidden;
    border-radius: 4px;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-accent-purple);
  }

  .carousel {
    display: flex;
    transition: transform 0.3s ease;
  }

  .carousel-slide {
    min-width: 100%;
    transition: transform 0.3s ease;
  }

  .carousel-slide img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 4px;
  }

  .carousel-controls {
    position: absolute;
    bottom: 1rem;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }

  .carousel-button {
    background: rgba(var(--accent-dark), 0.8);
    border: 1px solid var(--color-accent-purple);
    color: var(--color-accent-purple);
    padding: 0.5rem;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
  }

  .carousel-button:hover {
    background: var(--color-accent-purple);
    color: var(--color-bg-primary);
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
  }

  .carousel-indicators {
    display: flex;
    gap: 0.5rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(var(--accent-dark), 0.5);
    border: 1px solid var(--color-accent-purple);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .indicator.active {
    background: var(--color-accent-purple);
    box-shadow: 0 0 10px var(--color-accent-purple);
  }
</style>