---
interface Props {
  name: string;
  label: string;
  image: string;
}

const { name, label, image } = Astro.props;
---

<section class="hero crt scanline-anim">
  <div class="hero-background">
    <div class="grid-background"></div>
    <div class="neon-lines">
      <div class="neon-line"></div>
      <div class="neon-line"></div>
      <div class="neon-line"></div>
      <div class="neon-line"></div>
    </div>
    <div class="glow-orbs">
      <div class="glow-orb"></div>
      <div class="glow-orb"></div>
      <div class="glow-orb"></div>
    </div>
    <div class="scanlines"></div>
  </div>
  
  <div class="hero-content">
    <div class="profile-image-container">
      <img src={image} alt={name} class="profile-image" />
      <div class="profile-image-glow neon-pulse"></div>
      <div class="secret-message">AAAAAAAAAA</div>
    </div>
    <div class="title-container">
      <h1 class="title-glitch neon-blue" data-glitch="YEYOBITZ">{name}</h1>
    </div>
    <p class="subtitle neon-purple glitch" data-glitch={label}>{label}</p>
  </div>
</section>

<style>
  /* Hero Base */
  .hero {
    position: relative;
    height: 80vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  /* Background Elements */
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 1;
  }

  .grid-background {
    position: absolute;
    width: 400%;
    height: 400%;
    top: -150%;
    left: -150%;
    background-image: 
      linear-gradient(90deg, var(--color-accent-blue) 0.5px, transparent 0.5px),
      linear-gradient(var(--color-accent-purple) 0.5px, transparent 0.5px);
    background-size: 4rem 4rem;
    transform: perspective(50vh) rotateX(60deg) translateZ(0);
    animation: gridMove 20s linear infinite;
    opacity: 0.15;
  }

  .neon-lines {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  .neon-line {
    position: absolute;
    background: linear-gradient(90deg, 
      transparent,
      var(--color-accent-blue),
      var(--color-accent-purple),
      var(--color-accent-blue),
      transparent
    );
    height: 1px;
    width: 200%;
    left: -50%;
    opacity: 0;
    animation: neonScan 4s linear infinite;
  }

  .neon-line:nth-child(1) { top: 20%; animation-delay: 0s; }
  .neon-line:nth-child(2) { top: 40%; animation-delay: 1s; }
  .neon-line:nth-child(3) { top: 60%; animation-delay: 2s; }
  .neon-line:nth-child(4) { top: 80%; animation-delay: 3s; }

  .glow-orbs {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  .glow-orb {
    position: absolute;
    width: 30vh;
    height: 30vh;
    border-radius: 50%;
    filter: blur(5vh);
    opacity: 0.3;
    animation: orbFloat 10s ease-in-out infinite;
  }

  .glow-orb:nth-child(1) {
    background: var(--color-accent-blue);
    top: 20%;
    left: 35%;
    animation-delay: 0s;
  }

  .glow-orb:nth-child(2) {
    background: var(--color-accent-purple);
    top: 60%;
    right: 20%;
    animation-delay: -5s;
  }

  .glow-orb:nth-child(3) {
    background: var(--color-accent-green);
    bottom: 10%;
    left: 20%;
    animation-delay: -2.5s;
  }

  .scanlines {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: repeating-linear-gradient(
      0deg,
      transparent 0%,
      rgba(0, 0, 0, 0.1) 50%,
      transparent 100%
    );
    background-size: 100% 4px;
    animation: scanlineMove 10s linear infinite;
    pointer-events: none;
    z-index: 5;
  }

  /* Content Styles */
  .hero-content {
    position: relative;
    text-align: center;
    width: 100%;
    z-index: 10;
  }

  .subtitle {
    font-size: 2rem;
    margin-top: 0.2rem;
    font-family: var(--font-heading);
    letter-spacing: 0.1em;
    line-height: 1.4;
    text-align: center;
  }

  .title-container {
    position: relative;
    width: 100%;
    text-align: center;
  }

  h1 {
    font-size: 4.5rem;
    font-weight: 700;
    margin-bottom: 0.5em;
    letter-spacing: 0.15em;
    display: inline-block;
    position: relative;
    z-index: 10;
    
  }

  /* Profile Image */
  .profile-image-container {
    position: relative;
    width: 220px;
    height: 220px;
    margin: 0 auto 3rem;
    cursor: pointer;
    z-index: 20;
  }

  .profile-image {
    position: relative;
    z-index: 22;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    transition: all 0.3s ease;
  }

  .profile-image-container:hover {
    transform: scale(1.05);
  }

  .profile-image-glow {
    position: absolute;
    top: -10px;
    left: -10px;
    width: calc(100% + 20px);
    height: calc(100% + 20px);
    border-radius: 50%;
    background: var(--color-accent-blue);
    filter: blur(30px);
    opacity: 0.4;
    z-index: 21;
    animation: glowPulse 4s ease-in-out infinite;
    mix-blend-mode: screen;
  }

  /* Title Glitch Effect */
  .title-glitch {
    position: relative;
    transition: all 0.3s ease;
    font-size: clamp(2rem, 8vw, 4.5rem);
    letter-spacing: 0.2em;
    padding: 0 0.1em;
  }

  .title-glitch:hover {
    animation: textFlicker 0.05s infinite;
    text-shadow: 
      0 0 10px var(--color-accent-blue),
      0 0 20px var(--color-accent-blue),
      0 0 40px var(--color-accent-blue);
  }

  .title-glitch:hover::before,
  .title-glitch:hover::after {
    content: attr(data-glitch);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    animation: chromaOffset 0.2s infinite steps(2);
  }

  .title-glitch:hover::before {
    color: #0ff;
    left: -2px;
    animation: glitchBefore 0.1s infinite steps(2);
    text-shadow: 2px 0 #ff0080;
  }

  .title-glitch:hover::after {
    color: #f0f;
    left: 2px;
    animation: glitchAfter 0.15s infinite steps(2);
    text-shadow: -2px 0 #00ff00;
  }

  @keyframes chromaOffset {
    0%, 20%, 100% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    }
    21%, 40% {
      clip-path: polygon(0 33%, 100% 33%, 100% 66%, 0 66%);
    }
    41%, 60% {
      clip-path: polygon(0 44%, 100% 44%, 100% 55%, 0 55%);
    }
    61%, 80% {
      clip-path: polygon(0 15%, 100% 15%, 100% 85%, 0 85%);
    }
  }

  @keyframes textFlicker {
    0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
      opacity: 1;
    }
    20%, 22%, 24%, 55% {
      opacity: 0.8;
    }
  }

  @keyframes glitchBefore {
    0% {
      transform: translate(-2px, 2px);
    }
    25% {
      transform: translate(-4px, -2px);
    }
    50% {
      transform: translate(2px, 4px);
    }
    75% {
      transform: translate(4px, -4px);
    }
    100% {
      transform: translate(-2px, 2px);
    }
  }

  @keyframes glitchAfter {
    0% {
      transform: translate(2px, -2px);
    }
    25% {
      transform: translate(4px, 2px);
    }
    50% {
      transform: translate(-2px, -4px);
    }
    75% {
      transform: translate(-4px, 4px);
    }
    100% {
      transform: translate(2px, -2px);
    }
  }

  /* Animations */
  @keyframes gridMove {
    0% {
      transform: perspective(50vh) rotateX(60deg) translateY(0);
    }
    100% {
      transform: perspective(50vh) rotateX(60deg) translateY(4rem);
    }
  }

  @keyframes neonScan {
    0% {
      transform: translateX(-50%);
      opacity: 0;
    }
    20% {
      opacity: 0.5;
    }
    80% {
      opacity: 0.5;
    }
    100% {
      transform: translateX(50%);
      opacity: 0;
    }
  }

  @keyframes orbFloat {
    0%, 100% {
      transform: translate(0, 0);
    }
    25% {
      transform: translate(10%, 10%);
    }
    50% {
      transform: translate(-5%, 5%);
    }
    75% {
      transform: translate(5%, -10%);
    }
  }

  @keyframes scanlineMove {
    from {
      background-position: 0 0;
    }
    to {
      background-position: 0 100%;
    }
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes glowPulse {
    0%, 100% {
      opacity: 0.4;
      transform: scale(1);
    }
    50% {
      opacity: 0.6;
      transform: scale(1.1);
    }
  }

  @keyframes glitch-anim-1 {
    0% {
      clip: rect(24px, 9999px, 30px, 0);
    }
    20% {
      clip: rect(12px, 9999px, 118px, 0);
    }
    40% {
      clip: rect(48px, 9999px, 56px, 0);
    }
    60% {
      clip: rect(28px, 9999px, 86px, 0);
    }
    80% {
      clip: rect(4px, 9999px, 92px, 0);
    }
    100% {
      clip: rect(56px, 9999px, 46px, 0);
    }
  }

  @keyframes glitch-anim-2 {
    0% {
      clip: rect(36px, 9999px, 4px, 0);
    }
    20% {
      clip: rect(92px, 9999px, 48px, 0);
    }
    40% {
      clip: rect(64px, 9999px, 16px, 0);
    }
    60% {
      clip: rect(52px, 9999px, 26px, 0);
    }
    80% {
      clip: rect(8px, 9999px, 76px, 0);
    }
    100% {
      clip: rect(96px, 9999px, 38px, 0);
    }
  }

  /* Media Queries */
  @media (max-width: 768px) {
    h1 {
      font-size: 2.5rem;
    }

    .subtitle {
      font-size: 1.3rem;
    }

    .profile-image-container {
      width: 180px;
      height: 180px;
      margin-bottom: 2rem;
    }

    .grid-background {
      background-size: 2rem 2rem;
    }

    .glow-orb {
      width: 20vh;
      height: 20vh;
      filter: blur(3vh);
    }
  }

  @media (max-width: 480px) {
    h1 {
      font-size: 2rem;
    }

    .subtitle {
      font-size: 1rem;
    }

    .profile-image-container {
      width: 150px;
      height: 150px;
      margin-bottom: 1.5rem;
    }

    .grid-background {
      background-size: 1.5rem 1.5rem;
    }

    .glow-orb {
      width: 15vh;
      height: 15vh;
      filter: blur(2vh);
    }
  }

  .secret-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: var(--font-heading);
    color: var(--color-accent-green);
    font-size: 1.5rem;
    text-shadow: 0 0 10px var(--color-accent-green);
    opacity: 0;
    visibility: hidden;
    z-index: 23;
    white-space: nowrap;
    transition: all 0.3s ease;
  }

  .profile-image-container.activated .profile-image {
    animation: crazyDance 0.5s ease-in-out;
    filter: hue-rotate(360deg);
  }

  .profile-image-container.activated .secret-message {
    opacity: 1;
    visibility: visible;
    animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  .profile-image-container.activated .profile-image-glow {
    animation: crazyGlow 0.5s ease-in-out;
  }

  @keyframes crazyDance {
    0% { transform: rotate(0deg) scale(1); }
    25% { transform: rotate(90deg) scale(1.2); }
    50% { transform: rotate(180deg) scale(0.8); }
    75% { transform: rotate(270deg) scale(1.2); }
    100% { transform: rotate(360deg) scale(1); }
  }

  @keyframes bounceIn {
    0% { transform: translate(-50%, -50%) scale(0); }
    50% { transform: translate(-50%, -50%) scale(1.2); }
    100% { transform: translate(-50%, -50%) scale(1); }
  }

  @keyframes crazyGlow {
    0% { filter: blur(30px) hue-rotate(0deg); opacity: 0.4; }
    50% { filter: blur(50px) hue-rotate(180deg); opacity: 0.8; }
    100% { filter: blur(30px) hue-rotate(360deg); opacity: 0.4; }
  }
</style>

<script>
  function initProfileImage() {
    const container = document.querySelector('.profile-image-container');
    const audio = new Audio('/sounds/wena.mp3');
    
    if (container) {
      container.addEventListener('click', () => {
        container.classList.add('activated');
        audio.play();
        
        // Reproducir sonido de "¡WENA CTM!"
        setTimeout(() => {
          container.classList.remove('activated');
        }, 1000);
      });
    }
  }

  // Inicializar cuando el documento esté listo
  document.addEventListener('DOMContentLoaded', initProfileImage);
</script>

<svg style="position: absolute; width: 0; height: 0;">
  <defs>
    <filter id="glitch-horizontal">
      <feColorMatrix
        type="matrix"
        values="1 0 0 0 0
                0 0 0 0 0
                0 0 1 0 0
                0 0 0 1 0"
      />
      <feOffset dx="2" dy="0"/>
    </filter>
    <filter id="glitch-vertical">
      <feColorMatrix
        type="matrix"
        values="0 0 0 0 0
                0 1 0 0 0
                0 0 1 0 0
                0 0 0 1 0"
      />
      <feOffset dx="0" dy="2"/>
    </filter>
  </defs>
</svg>
</svg>