---
import ContactForm from './ContactForm.astro';
import TerminalHeader from '../TerminalHeader.astro';
import type { Profile } from '../../types/cv';

interface Props {
  email: string;
  profiles: Profile[];
}

const { email, profiles } = Astro.props;
---

<section class="section terminal-section" id="contact">
  <TerminalHeader title="CONTACT.EXE" />
  
  <div class="terminal-window">
    <div class="terminal-content">
      <div class="terminal-line typing-effect">
        <span class="terminal-prompt">&gt;</span>
        <span class="terminal-text">Have something in mind?</span>
      </div>
      <div class="terminal-line typing-effect-2">
        <span class="terminal-prompt">&gt;</span>
        <span class="terminal-text">Let's do it =)</span>
      </div>
      <div class="contact-form-wrapper">
        <ContactForm email={email} profiles={profiles} />
      </div>
    </div>
  </div>
</section>

<style>
  .terminal-window {
    padding: 2rem;
  }

  .terminal-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .terminal-prompt {
    color: var(--color-accent-green);
    font-weight: 500;
  }

  .terminal-text {
    color: var(--color-text);
  }

  .terminal-line {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    font-family: var(--font-mono);
    font-size: 1.1rem;
    opacity: 0;
  }

  .contact-form-wrapper {
    opacity: 0;
    animation: fadeIn 0.5s ease-out forwards;
    animation-delay: 2s;
  }

  .typing-effect {
    animation: typing 0.1s steps(1) forwards,
               blink 0.75s step-end infinite;
    white-space: nowrap;
    border-right: 2px solid transparent;
    animation-delay: 0.3s;
  }

  .typing-effect-2 {
    animation: typing 0.1s steps(1) forwards,
               blink 0.75s step-end infinite;
    white-space: nowrap;
    border-right: 2px solid transparent;
    animation-delay: 1.2s;
  }

  @keyframes typing {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes blink {
    from, to {
      border-color: transparent;
    }
    50% {
      border-color: var(--color-accent-green);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (max-width: 768px) {
    .terminal-window {
      padding: 1.5rem;
    }

    .terminal-content {
      gap: 1.25rem;
    }

    .terminal-line {
      font-size: 1rem;
      gap: 0.35rem;
    }
  }

  @media (max-width: 480px) {
    .terminal-window {
      padding: 1rem;
    }

    .terminal-content {
      gap: 1rem;
    }

    .terminal-line {
      font-size: 0.9rem;
      gap: 0.25rem;
    }
  }
</style>

<script>
  function typeText(element: HTMLElement, text: string, startDelay: number) {
    let currentText = '';
    const textElement = element.querySelector('.terminal-text');
    if (!textElement) return;

    element.style.opacity = '1';
    textElement.textContent = '';

    setTimeout(() => {
      let index = 0;
      const interval = setInterval(() => {
        if (index < text.length) {
          currentText += text[index];
          textElement.textContent = currentText;
          index++;
        } else {
          clearInterval(interval);
        }
      }, Math.random() * 30 + 30);
    }, startDelay);
  }

  // Iniciar las animaciones cuando la sección es visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const section = entry.target;
        const lines = section.querySelectorAll('.terminal-line');
        
        lines.forEach((line, index) => {
          const text = line.querySelector('.terminal-text')?.textContent || '';
          typeText(line as HTMLElement, text, index * 900);
        });
        
        observer.unobserve(section);
      }
    });
  }, { threshold: 0.2 });

  // Observar la sección de contacto
  const contactSection = document.querySelector('#contact');
  if (contactSection) {
    observer.observe(contactSection);
  }
</script> 