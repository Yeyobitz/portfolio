---
import type { Skill } from '../types/cv';

interface Props {
  skills: Skill[];
}

const { skills } = Astro.props;

// Group skills by category and sort by level
const skillCategories = skills.reduce((acc, skill) => {
  const category = skill.keywords[0];
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(skill);
  return acc;
}, {} as Record<string, Skill[]>);

// Sort categories by importance
const categoryOrder = [
  "Web development",
  "Databases",
  "Version control",
  "Game Development",
  "Design",
  "Development Tools"
];

const sortedCategories = Object.entries(skillCategories).sort(([a], [b]) => {
  return categoryOrder.indexOf(a) - categoryOrder.indexOf(b);
});

// Level to progress bar mapping
const levelToProgress = {
  "Basic": 33,
  "Intermediate": 66,
  "Advanced": 100
};
---

<section class="skills crt" id="skills">
  <h2 class="glitch">SKILLS</h2>
  <div class="skills-grid">
    {sortedCategories.map(([category, categorySkills]) => (
      <div class="skill-category">
        <h3 class="category-title">{category.toUpperCase()}</h3>
        <div class="skill-list">
          {categorySkills.map((skill) => (
            <div class="skill-item">
              <div class="skill-header">
                <span class="skill-name">{skill.name}</span>
                <span class="skill-level">{skill.level}</span>
              </div>
              <div class="progress-bar">
                <div 
                  class="progress-fill" 
                  style={`width: ${levelToProgress[skill.level]}%`}
                >
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  .skills {
    margin: 4rem 0;
    padding: 2rem;
    background: var(--color-bg-secondary);
    border: 2px solid var(--color-accent-purple);
    box-shadow: 0 0 20px rgba(var(--accent), 0.3);
  }

  h2 {
    font-size: 2.5rem;
    margin-bottom: 3rem;
    text-align: center;
    color: var(--color-accent-blue);
    text-shadow: 
      0 0 5px var(--color-accent-blue),
      0 0 10px var(--color-accent-blue);
    letter-spacing: 0.5rem;
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .skill-category {
    background: var(--color-bg-tertiary);
    padding: 1.5rem;
    border: 1px solid var(--color-accent-purple);
    border-radius: 4px;
  }

  .category-title {
    font-family: var(--font-heading);
    font-size: 1rem;
    color: var(--color-accent-purple);
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--color-accent-purple);
    text-shadow: 0 0 5px var(--color-accent-purple);
  }

  .skill-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .skill-item {
    background: rgba(var(--accent-dark), 0.3);
    padding: 0.75rem;
    border-radius: 4px;
  }

  .skill-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .skill-name {
    font-family: var(--font-body);
    color: var(--color-text);
  }

  .skill-level {
    font-size: 0.8em;
    color: var(--color-accent-blue);
  }

  .progress-bar {
    height: 4px;
    background: var(--color-bg-primary);
    border-radius: 2px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(
      90deg,
      var(--color-accent-purple),
      var(--color-accent-blue)
    );
    transition: width 0.3s ease-in-out;
    box-shadow: 0 0 10px rgba(var(--accent), 0.5);
  }

  @keyframes skillPulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.02);
    }
    100% {
      transform: scale(1);
    }
  }

  .skill-item:hover {
    animation: skillPulse 1s ease-in-out infinite;
  }

  @media (max-width: 768px) {
    .skills-grid {
      grid-template-columns: 1fr;
    }

    h2 {
      font-size: 2rem;
      letter-spacing: 0.3rem;
    }
  }
</style>